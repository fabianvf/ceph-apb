---

##############################################################################
## Provision ceph
##############################################################################

# TODO:
# verify flexvolume stuff
# - kubernetesMasterConfig.controllerArguments.flex-volume-plugin-dir must be writeable
#
- command: oc login --token {{ admin_api_key }}

- name: Configure PodSecurityPolicy
  k8s_raw:
    state: '{{ state }}'
    verify_ssl: no
    api_key: '{{ admin_api_key }}'
    definition:
      apiVersion: v1beta1
      kind: PodSecurityPolicy
      metadata:
        name: privileged
      spec:
        fsGroup:
          rule: RunAsAny
        privileged: true
        runAsUser:
          rule: RunAsAny
        seLinux:
          rule: RunAsAny
        supplementalGroups:
          rule: RunAsAny
        volumes:
        - '*'
        allowedCapabilities:
        - '*'
        hostPID: true
        hostIPC: true
        hostNetwork: false

- name: enable the Rook Agent ServiceAccount to run the rook-agent Pods on all nodes with privileged rights
  k8s_raw:
    state: '{{ state }}'
    verify_ssl: no
    api_key: '{{ admin_api_key }}'
    definition:
      apiVersion: v1
      kind: ClusterRole
      metadata:
        name: privileged-psp-user
      rules:
      - apiGroups:
        - extensions
        resources:
        - podsecuritypolicies
        resourceNames:
        - privileged
        verbs:
        - use

- name: Create rook-system namespace
  k8s_raw:
    name: rook-system
    kind: Namespace
    version: v1
    state: '{{ state }}'
    verify_ssl: no
    api_key: '{{ admin_api_key }}'

- name: Allow the rook-agent serviceAccount to use the privileged PSP
  k8s_raw:
    state: '{{ state }}'
    verify_ssl: no
    api_key: '{{ admin_api_key }}'
    definition:
      apiVersion: v1
      kind: ClusterRoleBinding
      metadata:
        name: rook-agent-psp
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: privileged-psp-user
      subjects:
      - kind: ServiceAccount
        name: rook-agent
        namespace: rook-system

- name: Create rook namespace
  k8s_raw:
    name: rook
    kind: Namespace
    version: v1
    state: '{{ state }}'
    verify_ssl: no
    api_key: '{{ admin_api_key }}'

- name: Allow the default serviceAccount to use the priviliged PSP
  k8s_raw:
    state: '{{ state }}'
    verify_ssl: no
    api_key: '{{ admin_api_key }}'
    definition:
      apiVersion: v1
      kind: RoleBinding
      metadata:
        name: rook-default-psp
        namespace: rook
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: privileged-psp-user
      subjects:
      - kind: ServiceAccount
        name: default
        namespace: rook

- name: Allow the rook-ceph-osd serviceAccount to use the privileged PSP
  k8s_raw:
    state: '{{ state }}'
    verify_ssl: no
    api_key: '{{ admin_api_key }}'
    definition:
      apiVersion: v1
      kind: RoleBinding
      metadata:
        name: rook-ceph-osd-psp
        namespace: rook
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: privileged-psp-user
      subjects:
      - kind: ServiceAccount
        name: rook-ceph-osd
        namespace: rook

- name: Create rook-operator ClusterRole
  k8s_raw:
    definition: "{{ lookup('template', 'rook-operator-clusterrole.yaml.j2') | from_yaml }}"
    state: '{{ state }}'
    verify_ssl: no
    api_key: '{{ admin_api_key }}'

- name: Create rook-operator ServiceAccount
  k8s_raw:
    name: rook-operator
    namespace: rook-system
    kind: ServiceAccount
    version: v1
    state: '{{ state }}'
    verify_ssl: no
    api_key: '{{ admin_api_key }}'


- name: Create rook-operator ClusterRoleBinding
  k8s_raw:
    state: '{{ state }}'
    verify_ssl: no
    api_key: '{{ admin_api_key }}'
    definition:
      kind: ClusterRoleBinding
      apiVersion: v1beta1
      metadata:
        name: rook-operator
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: rook-operator
      subjects:
      - kind: ServiceAccount
        name: rook-operator
        namespace: rook-system

- name: create operator
  k8s_raw:
    state: '{{ state }}'
    verify_ssl: no
    api_key: '{{ admin_api_key }}'
    definition: "{{ lookup('template', 'rook-operator.yaml.j2') | from_yaml }}"

# TOOD: good testing ground for dynamic client integration
- name: create cluster
  command: oc create -f /opt/ansible/roles/ceph-apb/templates/rook-cluster.yaml.j2
- name: create storageclass
  command: oc create -f /opt/ansible/roles/ceph-apb/templates/rook-storageclass.yaml.j2
# TODO: set up monitoring
